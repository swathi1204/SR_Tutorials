{"ast":null,"code":"import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport const awsAuthMiddleware = options => (next, context) => async function (args) {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n  const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n  const signer = await options.signer(authScheme);\n  const output = await next({\n    ...args,\n    request: await signer.sign(args.request, {\n      signingDate: getSkewCorrectedDate(options.systemClockOffset),\n      signingRegion: multiRegionOverride || context[\"signing_region\"],\n      signingService: context[\"signing_service\"]\n    })\n  }).catch(error => {\n    const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n    if (serverTime) {\n      options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n    }\n    throw error;\n  });\n  const dateHeader = getDateHeader(output.response);\n  if (dateHeader) {\n    options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n  }\n  return output;\n};\nconst getDateHeader = response => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nexport const awsAuthMiddlewareOptions = {\n  name: \"awsAuthMiddleware\",\n  tags: [\"SIGNATURE\", \"AWSAUTH\"],\n  relation: \"after\",\n  toMiddleware: \"retryMiddleware\",\n  override: true\n};\nexport const getAwsAuthPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n  }\n});\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}