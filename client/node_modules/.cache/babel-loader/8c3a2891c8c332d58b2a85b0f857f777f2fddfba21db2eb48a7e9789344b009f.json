{"ast":null,"code":"import packageInfo from \"../package.json\";\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { DEFAULT_USE_DUALSTACK_ENDPOINT, DEFAULT_USE_FIPS_ENDPOINT } from \"@aws-sdk/config-resolver\";\nimport { FetchHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { invalidProvider } from \"@aws-sdk/invalid-dependency\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-browser\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-browser\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-browser\";\nexport const getRuntimeConfig = config => {\n  const defaultsMode = resolveDefaultsModeConfig(config);\n  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n  const clientSharedValues = getSharedRuntimeConfig(config);\n  return {\n    ...clientSharedValues,\n    ...config,\n    runtime: \"browser\",\n    defaultsMode,\n    bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n    credentialDefaultProvider: config?.credentialDefaultProvider ?? (_ => () => Promise.reject(new Error(\"Credential is missing\"))),\n    defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({\n      serviceId: clientSharedValues.serviceId,\n      clientVersion: packageInfo.version\n    }),\n    maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,\n    region: config?.region ?? invalidProvider(\"Region is missing\"),\n    requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n    retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),\n    sha256: config?.sha256 ?? Sha256,\n    streamCollector: config?.streamCollector ?? streamCollector,\n    useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),\n    useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}