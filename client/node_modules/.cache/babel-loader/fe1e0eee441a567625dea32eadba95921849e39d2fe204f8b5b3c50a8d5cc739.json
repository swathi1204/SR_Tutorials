{"ast":null,"code":"export class ServiceException extends Error {\n  constructor(options) {\n    super(options.message);\n    Object.setPrototypeOf(this, ServiceException.prototype);\n    this.name = options.name;\n    this.$fault = options.$fault;\n    this.$metadata = options.$metadata;\n  }\n}\nexport const decorateServiceException = function (exception) {\n  let additions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  Object.entries(additions).filter(_ref => {\n    let [, v] = _ref;\n    return v !== undefined;\n  }).forEach(_ref2 => {\n    let [k, v] = _ref2;\n    if (exception[k] == undefined || exception[k] === \"\") {\n      exception[k] = v;\n    }\n  });\n  const message = exception.message || exception.Message || \"UnknownError\";\n  exception.message = message;\n  delete exception.Message;\n  return exception;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}