{"ast":null,"code":"import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { AssumeRoleWithSAMLRequestFilterSensitiveLog, AssumeRoleWithSAMLResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { deserializeAws_queryAssumeRoleWithSAMLCommand, serializeAws_queryAssumeRoleWithSAMLCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleWithSAMLCommand extends $Command {\n  constructor(input) {\n    super();\n    this.input = input;\n  }\n  static getEndpointParameterInstructions() {\n    return {\n      UseGlobalEndpoint: {\n        type: \"builtInParams\",\n        name: \"useGlobalEndpoint\"\n      },\n      UseFIPS: {\n        type: \"builtInParams\",\n        name: \"useFipsEndpoint\"\n      },\n      Endpoint: {\n        type: \"builtInParams\",\n        name: \"endpoint\"\n      },\n      Region: {\n        type: \"builtInParams\",\n        name: \"region\"\n      },\n      UseDualStack: {\n        type: \"builtInParams\",\n        name: \"useDualstackEndpoint\"\n      }\n    };\n  }\n  resolveMiddleware(clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));\n    const stack = clientStack.concat(this.middlewareStack);\n    const {\n      logger\n    } = configuration;\n    const clientName = \"STSClient\";\n    const commandName = \"AssumeRoleWithSAMLCommand\";\n    const handlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: AssumeRoleWithSAMLRequestFilterSensitiveLog,\n      outputFilterSensitiveLog: AssumeRoleWithSAMLResponseFilterSensitiveLog\n    };\n    const {\n      requestHandler\n    } = configuration;\n    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n  }\n  serialize(input, context) {\n    return serializeAws_queryAssumeRoleWithSAMLCommand(input, context);\n  }\n  deserialize(output, context) {\n    return deserializeAws_queryAssumeRoleWithSAMLCommand(output, context);\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}