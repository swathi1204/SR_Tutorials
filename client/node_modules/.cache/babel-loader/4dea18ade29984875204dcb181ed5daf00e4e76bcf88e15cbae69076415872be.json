{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level) {\n    var _a;\n    /**\n     * A spec test exists that allows level to be any string.\n     * \"invalid readConcern with out stage\"\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n     */\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\n   * Construct a ReadConcern given an options object.\n   *\n   * @param options - The options object from which to extract the write concern.\n   */\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n    if (options.readConcern) {\n      const {\n        readConcern\n      } = options;\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n    return;\n  }\n  static get MAJORITY() {\n    return exports.ReadConcernLevel.majority;\n  }\n  static get AVAILABLE() {\n    return exports.ReadConcernLevel.available;\n  }\n  static get LINEARIZABLE() {\n    return exports.ReadConcernLevel.linearizable;\n  }\n  static get SNAPSHOT() {\n    return exports.ReadConcernLevel.snapshot;\n  }\n  toJSON() {\n    return {\n      level: this.level\n    };\n  }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}