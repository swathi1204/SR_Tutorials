{"ast":null,"code":"import { GetIdCommand } from \"@aws-sdk/client-cognito-identity\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { fromCognitoIdentity } from \"./fromCognitoIdentity\";\nimport { localStorage } from \"./localStorage\";\nimport { resolveLogins } from \"./resolveLogins\";\nexport function fromCognitoIdentityPool(_ref) {\n  let {\n    accountId,\n    cache = localStorage(),\n    client,\n    customRoleArn,\n    identityPoolId,\n    logins,\n    userIdentifier = !logins || Object.keys(logins).length === 0 ? \"ANONYMOUS\" : undefined\n  } = _ref;\n  const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;\n  let provider = async () => {\n    let identityId = cacheKey && (await cache.getItem(cacheKey));\n    if (!identityId) {\n      const {\n        IdentityId = throwOnMissingId()\n      } = await client.send(new GetIdCommand({\n        AccountId: accountId,\n        IdentityPoolId: identityPoolId,\n        Logins: logins ? await resolveLogins(logins) : undefined\n      }));\n      identityId = IdentityId;\n      if (cacheKey) {\n        Promise.resolve(cache.setItem(cacheKey, identityId)).catch(() => {});\n      }\n    }\n    provider = fromCognitoIdentity({\n      client,\n      customRoleArn,\n      logins,\n      identityId\n    });\n    return provider();\n  };\n  return () => provider().catch(async err => {\n    if (cacheKey) {\n      Promise.resolve(cache.removeItem(cacheKey)).catch(() => {});\n    }\n    throw err;\n  });\n}\nfunction throwOnMissingId() {\n  throw new CredentialsProviderError(\"Response from Amazon Cognito contained no identity ID\");\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}