{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReceiveBuffer = void 0;\nclass ReceiveBuffer {\n  constructor() {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4096;\n    this.buffer = Buffer.allocUnsafe(size);\n    this.offset = 0;\n    this.originalSize = size;\n  }\n  get length() {\n    return this.offset;\n  }\n  append(data) {\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Attempted to append a non-buffer instance to ReceiveBuffer.');\n    }\n    if (this.offset + data.length >= this.buffer.length) {\n      const tmp = this.buffer;\n      this.buffer = Buffer.allocUnsafe(Math.max(this.buffer.length + this.originalSize, this.buffer.length + data.length));\n      tmp.copy(this.buffer);\n    }\n    data.copy(this.buffer, this.offset);\n    return this.offset += data.length;\n  }\n  peek(length) {\n    if (length > this.offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n    return this.buffer.slice(0, length);\n  }\n  get(length) {\n    if (length > this.offset) {\n      throw new Error('Attempted to read beyond the bounds of the managed internal data.');\n    }\n    const value = Buffer.allocUnsafe(length);\n    this.buffer.slice(0, length).copy(value);\n    this.buffer.copyWithin(0, length, length + this.offset - length);\n    this.offset -= length;\n    return value;\n  }\n}\nexports.ReceiveBuffer = ReceiveBuffer;\n//# sourceMappingURL=receivebuffer.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}