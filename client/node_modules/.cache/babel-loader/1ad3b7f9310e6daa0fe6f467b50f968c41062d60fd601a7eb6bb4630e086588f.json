{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SeverityLevel = void 0;\nconst stream_1 = require(\"stream\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s === null || s === void 0 ? void 0 : s.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively.\n *\n * @returns the Writable stream to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  const isValidLogDestinationString = destination => ['stdout', 'stderr'].includes(destination.toLowerCase());\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof stream_1.Writable) {\n    return mongodbLogPath;\n  }\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  return process.stderr;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  emergency(component, message) {}\n  alert(component, message) {}\n  critical(component, message) {}\n  error(component, message) {}\n  warn(component, message) {}\n  notice(component, message) {}\n  info(component, message) {}\n  debug(component, message) {}\n  trace(component, message) {}\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    var _a, _b, _c, _d, _e, _f;\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = (_a = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL)) !== null && _a !== void 0 ? _a : exports.SeverityLevel.OFF;\n    return {\n      componentSeverities: {\n        command: (_b = parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND)) !== null && _b !== void 0 ? _b : defaultSeverity,\n        topology: (_c = parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY)) !== null && _c !== void 0 ? _c : defaultSeverity,\n        serverSelection: (_d = parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION)) !== null && _d !== void 0 ? _d : defaultSeverity,\n        connection: (_e = parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION)) !== null && _e !== void 0 ? _e : defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength: (_f = (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH)) !== null && _f !== void 0 ? _f : 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}