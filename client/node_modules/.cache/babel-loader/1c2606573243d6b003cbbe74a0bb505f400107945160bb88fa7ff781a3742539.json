{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar tslib_1 = require(\"tslib\");\nvar constants_1 = require(\"./constants\");\nvar RawSha256_1 = require(\"./RawSha256\");\nvar util_1 = require(\"@aws-crypto/util\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.secret = secret;\n    this.hash = new RawSha256_1.RawSha256();\n    this.reset();\n  }\n  Sha256.prototype.update = function (toHash) {\n    if ((0, util_1.isEmptyData)(toHash) || this.error) {\n      return;\n    }\n    try {\n      this.hash.update((0, util_1.convertToBuffer)(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  };\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  Sha256.prototype.digestSync = function () {\n    if (this.error) {\n      throw this.error;\n    }\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n      return this.outer.digest();\n    }\n    return this.hash.digest();\n  };\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  Sha256.prototype.digest = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        return [2 /*return*/, this.digestSync()];\n      });\n    });\n  };\n  Sha256.prototype.reset = function () {\n    this.hash = new RawSha256_1.RawSha256();\n    if (this.secret) {\n      this.outer = new RawSha256_1.RawSha256();\n      var inner = bufferFromSecret(this.secret);\n      var outer = new Uint8Array(constants_1.BLOCK_SIZE);\n      outer.set(inner);\n      for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n      this.hash.update(inner);\n      this.outer.update(outer);\n      // overwrite the copied key in memory\n      for (var i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;\nfunction bufferFromSecret(secret) {\n  var input = (0, util_1.convertToBuffer)(secret);\n  if (input.byteLength > constants_1.BLOCK_SIZE) {\n    var bufferHash = new RawSha256_1.RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n  var buffer = new Uint8Array(constants_1.BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n//# sourceMappingURL=jsSha256.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}