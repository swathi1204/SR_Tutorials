{"ast":null,"code":"const STORE_NAME = \"IdentityIds\";\nexport class IndexedDbStorage {\n  constructor() {\n    let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"aws:cognito-identity-ids\";\n    this.dbName = dbName;\n  }\n  getItem(key) {\n    return this.withObjectStore(\"readonly\", store => {\n      const req = store.get(key);\n      return new Promise(resolve => {\n        req.onerror = () => resolve(null);\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n  removeItem(key) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.delete(key);\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  setItem(id, value) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.put({\n        id,\n        value\n      });\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  getDb() {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  }\n  withObjectStore(mode, action) {\n    return this.getDb().then(db => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n      return new Promise((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(err => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}