{"ast":null,"code":"import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const serializeAws_queryAssumeRoleCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleRequest(input, context),\n    Action: \"AssumeRole\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n    Action: \"AssumeRoleWithSAML\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n    Action: \"AssumeRoleWithWebIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n    Action: \"DecodeAuthorizationMessage\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n    Action: \"GetAccessKeyInfo\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetCallerIdentityRequest(input, context),\n    Action: \"GetCallerIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetFederationTokenRequest(input, context),\n    Action: \"GetFederationToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetSessionTokenRequest(input, context),\n    Action: \"GetSessionToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPCommunicationError\":\n    case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n      throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidAuthorizationMessageException\":\n    case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n      throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  throwDefaultError({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: __BaseException,\n    errorCode\n  });\n};\nexport const deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetFederationTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetSessionTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n  const exception = new ExpiredTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n  const exception = new IDPCommunicationErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n  const exception = new IDPRejectedClaimException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n  const exception = new InvalidAuthorizationMessageException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n  const exception = new InvalidIdentityTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n  const exception = new MalformedPolicyDocumentException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n  const exception = new PackedPolicyTooLargeException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n  const exception = new RegionDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return __decorateServiceException(exception, body);\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref => {\n      let [key, value] = _ref;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.TransitiveTagKeys != null) {\n    const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n    if (input.TransitiveTagKeys?.length === 0) {\n      entries.TransitiveTagKeys = [];\n    }\n    Object.entries(memberEntries).forEach(_ref3 => {\n      let [key, value] = _ref3;\n      const loc = `TransitiveTagKeys.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.ExternalId != null) {\n    entries[\"ExternalId\"] = input.ExternalId;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  if (input.SourceIdentity != null) {\n    entries[\"SourceIdentity\"] = input.SourceIdentity;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.PrincipalArn != null) {\n    entries[\"PrincipalArn\"] = input.PrincipalArn;\n  }\n  if (input.SAMLAssertion != null) {\n    entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.WebIdentityToken != null) {\n    entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n  }\n  if (input.ProviderId != null) {\n    entries[\"ProviderId\"] = input.ProviderId;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n  const entries = {};\n  if (input.EncodedMessage != null) {\n    entries[\"EncodedMessage\"] = input.EncodedMessage;\n  }\n  return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n  const entries = {};\n  if (input.AccessKeyId != null) {\n    entries[\"AccessKeyId\"] = input.AccessKeyId;\n  }\n  return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n  const entries = {};\n  return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.Name != null) {\n    entries[\"Name\"] = input.Name;\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref6 => {\n      let [key, value] = _ref6;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref7 => {\n      let [key, value] = _ref7;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n    Object.entries(memberEntries).forEach(_ref8 => {\n      let [key, value] = _ref8;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n  const entries = {};\n  if (input.arn != null) {\n    entries[\"arn\"] = input.arn;\n  }\n  return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n  const entries = {};\n  if (input.Key != null) {\n    entries[\"Key\"] = input.Key;\n  }\n  if (input.Value != null) {\n    entries[\"Value\"] = input.Value;\n  }\n  return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryTag(entry, context);\n    Object.entries(memberEntries).forEach(_ref9 => {\n      let [key, value] = _ref9;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n  const contents = {\n    AssumedRoleId: undefined,\n    Arn: undefined\n  };\n  if (output[\"AssumedRoleId\"] !== undefined) {\n    contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Subject: undefined,\n    SubjectType: undefined,\n    Issuer: undefined,\n    Audience: undefined,\n    NameQualifier: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Subject\"] !== undefined) {\n    contents.Subject = __expectString(output[\"Subject\"]);\n  }\n  if (output[\"SubjectType\"] !== undefined) {\n    contents.SubjectType = __expectString(output[\"SubjectType\"]);\n  }\n  if (output[\"Issuer\"] !== undefined) {\n    contents.Issuer = __expectString(output[\"Issuer\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n  if (output[\"NameQualifier\"] !== undefined) {\n    contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    SubjectFromWebIdentityToken: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Provider: undefined,\n    Audience: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n    contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Provider\"] !== undefined) {\n    contents.Provider = __expectString(output[\"Provider\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = __expectString(output[\"Audience\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n  const contents = {\n    AccessKeyId: undefined,\n    SecretAccessKey: undefined,\n    SessionToken: undefined,\n    Expiration: undefined\n  };\n  if (output[\"AccessKeyId\"] !== undefined) {\n    contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n  }\n  if (output[\"SecretAccessKey\"] !== undefined) {\n    contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n  }\n  if (output[\"SessionToken\"] !== undefined) {\n    contents.SessionToken = __expectString(output[\"SessionToken\"]);\n  }\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Expiration\"]));\n  }\n  return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n  const contents = {\n    DecodedMessage: undefined\n  };\n  if (output[\"DecodedMessage\"] !== undefined) {\n    contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n  const contents = {\n    FederatedUserId: undefined,\n    Arn: undefined\n  };\n  if (output[\"FederatedUserId\"] !== undefined) {\n    contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n  const contents = {\n    Account: undefined\n  };\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n  const contents = {\n    UserId: undefined,\n    Account: undefined,\n    Arn: undefined\n  };\n  if (output[\"UserId\"] !== undefined) {\n    contents.UserId = __expectString(output[\"UserId\"]);\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = __expectString(output[\"Account\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = __expectString(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    FederatedUser: undefined,\n    PackedPolicySize: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"FederatedUser\"] !== undefined) {\n    contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = __expectString(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const contents = {\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n    headers\n  };\n  if (resolvedHostname !== undefined) {\n    contents.hostname = resolvedHostname;\n  }\n  if (body !== undefined) {\n    contents.body = body;\n  }\n  return new __HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return __getValueFromTextNode(parsedObjToReturn);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n  return value;\n};\nconst buildFormUrlencodedString = formEntries => Object.entries(formEntries).map(_ref10 => {\n  let [key, value] = _ref10;\n  return __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value);\n}).join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n  if (data.Error?.Code !== undefined) {\n    return data.Error.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}