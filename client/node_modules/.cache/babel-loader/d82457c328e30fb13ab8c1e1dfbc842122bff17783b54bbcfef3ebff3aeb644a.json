{"ast":null,"code":"import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else if (input.regionInfoProvider) {\n    signer = () => normalizeProvider(input.region)().then(async region => [(await input.regionInfoProvider(region, {\n      useFipsEndpoint: await input.useFipsEndpoint(),\n      useDualstackEndpoint: await input.useDualstackEndpoint()\n    })) || {}, region]).then(_ref => {\n      let [regionInfo, region] = _ref;\n      const {\n        signingRegion,\n        signingService\n      } = regionInfo;\n      input.signingRegion = input.signingRegion || signingRegion || region;\n      input.signingName = input.signingName || signingService || input.serviceId;\n      const params = {\n        ...input,\n        credentials: normalizedCreds,\n        region: input.signingRegion,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = input.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    });\n  } else {\n    signer = async authScheme => {\n      authScheme = Object.assign({}, {\n        name: \"sigv4\",\n        signingName: input.signingName || input.defaultSigningName,\n        signingRegion: await normalizeProvider(input.region)(),\n        properties: {}\n      }, authScheme);\n      const signingRegion = authScheme.signingRegion;\n      const signingService = authScheme.signingName;\n      input.signingRegion = input.signingRegion || signingRegion;\n      input.signingName = input.signingName || signingService || input.serviceId;\n      const params = {\n        ...input,\n        credentials: normalizedCreds,\n        region: input.signingRegion,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = input.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    };\n  }\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\nexport const resolveSigV4AuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(new SignatureV4({\n      credentials: normalizedCreds,\n      region: input.region,\n      service: input.signingName,\n      sha256,\n      uriEscapePath: signingEscapePath\n    }));\n  }\n  return {\n    ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\nconst normalizeCredentialProvider = credentials => {\n  if (typeof credentials === \"function\") {\n    return memoize(credentials, credentials => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, credentials => credentials.expiration !== undefined);\n  }\n  return normalizeProvider(credentials);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}