{"ast":null,"code":"import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = region => {\n  if (typeof region !== \"function\") {\n    return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n  }\n  return async () => {\n    try {\n      return await region();\n    } catch (e) {\n      return ASSUME_ROLE_DEFAULT_REGION;\n    }\n  };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  let closureSourceCreds;\n  return async (sourceCreds, params) => {\n    closureSourceCreds = sourceCreds;\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        credentialDefaultProvider: () => async () => closureSourceCreds,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  return async params => {\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexport const decorateDefaultCredentialProvider = provider => input => provider({\n  roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n  roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n  ...input\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}