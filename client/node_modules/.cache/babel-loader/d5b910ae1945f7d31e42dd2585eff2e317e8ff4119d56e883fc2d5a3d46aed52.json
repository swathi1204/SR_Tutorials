{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a server\n   */\n  constructor(topology, description, options) {\n    super();\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.s = {\n      description,\n      options,\n      logger: new logger_1.Logger('Server'),\n      state: common_1.STATE_CLOSED,\n      topology,\n      pool: new connection_pool_1.ConnectionPool(this, poolOptions),\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.s.pool.on(event, e => this.emit(event, e));\n    }\n    this.s.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.s.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.s.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    var _a;\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy(options, callback) {\n    var _a;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    options = Object.assign({}, {\n      force: false\n    }, options);\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.close();\n    }\n    this.s.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    var _a;\n    if (!this.loadBalanced) {\n      (_a = this[kMonitor]) === null || _a === void 0 ? void 0 : _a.requestCheck();\n    }\n  }\n  /**\n   * Execute a command\n   * @internal\n   */\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    const session = finalOptions.session;\n    const conn = session === null || session === void 0 ? void 0 : session.pinnedConnection;\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.s.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n    this.s.operationCount += 1;\n    this.s.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.s.operationCount -= 1;\n        if (!err) {\n          return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n        }\n        if (!(err instanceof errors_1.PoolClearedError)) {\n          this.handleError(err);\n        }\n        return cb(err);\n      }\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.s.operationCount -= 1;\n        cb(error, response);\n      }));\n    }, callback);\n  }\n  /**\n   * Handle SDAM error\n   * @internal\n   */\n  handleError(error, connection) {\n    if (!(error instanceof error_1.MongoError)) {\n      return;\n    }\n    const isStaleError = error.connectionGeneration && error.connectionGeneration < this.s.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n    const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n    const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.s.pool.clear({\n          serviceId: connection.serviceId\n        });\n      }\n    } else {\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.s.pool.clear({\n              serviceId: connection.serviceId\n            });\n          }\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n}\nexports.Server = Server;\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  var _a;\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    (_a = server[kMonitor]) === null || _a === void 0 ? void 0 : _a.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  return function handleOperationResult(error, result) {\n    if (result != null) {\n      return callback(undefined, result);\n    }\n    if ((options === null || options === void 0 ? void 0 : options.noResponse) === true) {\n      return callback(undefined, null);\n    }\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n    if (connectionIsStale(server.s.pool, connection)) {\n      return callback(error);\n    }\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.s.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    server.handleError(error, connection);\n    return callback(error);\n  };\n}\n//# sourceMappingURL=server.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}