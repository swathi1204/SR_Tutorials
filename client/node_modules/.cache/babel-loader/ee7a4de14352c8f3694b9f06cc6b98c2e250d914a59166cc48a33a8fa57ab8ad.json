{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n});\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) return callback(new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication'));\n    const {\n      username\n    } = credentials;\n    function externalCommand(command, cb) {\n      return connection.command((0, utils_1.ns)('$external.$cmd'), command, undefined, cb);\n    }\n    makeKerberosClient(authContext, (err, client) => {\n      if (err) return callback(err);\n      if (client == null) return callback(new error_1.MongoMissingDependencyError('GSSAPI client missing'));\n      client.step('', (err, payload) => {\n        if (err) return callback(err);\n        externalCommand(saslStart(payload), (err, result) => {\n          if (err) return callback(err);\n          if (result == null) return callback();\n          negotiate(client, 10, result.payload, (err, payload) => {\n            if (err) return callback(err);\n            externalCommand(saslContinue(payload, result.conversationId), (err, result) => {\n              if (err) return callback(err);\n              if (result == null) return callback();\n              finalize(client, username, result.payload, (err, payload) => {\n                if (err) return callback(err);\n                externalCommand({\n                  saslContinue: 1,\n                  conversationId: result.conversationId,\n                  payload\n                }, (err, result) => {\n                  if (err) return callback(err);\n                  callback(undefined, result);\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n}\nexports.GSSAPI = GSSAPI;\nfunction makeKerberosClient(authContext, callback) {\n  var _a;\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    return callback(new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.'));\n  }\n  if ('kModuleError' in deps_1.Kerberos) {\n    return callback(deps_1.Kerberos['kModuleError']);\n  }\n  const {\n    initializeClient\n  } = deps_1.Kerberos;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = (_a = mechanismProperties.SERVICE_NAME) !== null && _a !== void 0 ? _a : 'mongodb';\n  performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties, (err, host) => {\n    var _a;\n    if (err) return callback(err);\n    const initOptions = {};\n    if (password != null) {\n      Object.assign(initOptions, {\n        user: username,\n        password: password\n      });\n    }\n    const spnHost = (_a = mechanismProperties.SERVICE_HOST) !== null && _a !== void 0 ? _a : host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n      spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    initializeClient(spn, initOptions, (err, client) => {\n      // TODO(NODE-3483)\n      if (err) return callback(new error_1.MongoRuntimeError(err));\n      callback(undefined, client);\n    });\n  });\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nfunction negotiate(client, retries, payload, callback) {\n  client.step(payload, (err, response) => {\n    // Retries exhausted, raise error\n    if (err && retries === 0) return callback(err);\n    // Adjust number of retries and call step again\n    if (err) return negotiate(client, retries - 1, payload, callback);\n    // Return the payload\n    callback(undefined, response || '');\n  });\n}\nfunction finalize(client, user, payload, callback) {\n  // GSS Client Unwrap\n  client.unwrap(payload, (err, response) => {\n    if (err) return callback(err);\n    // Wrap the response\n    client.wrap(response || '', {\n      user\n    }, (err, wrapped) => {\n      if (err) return callback(err);\n      // Return the payload\n      callback(undefined, wrapped);\n    });\n  });\n}\nfunction performGSSAPICanonicalizeHostName(host, mechanismProperties, callback) {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n    return callback(undefined, host);\n  }\n  // If forward and reverse or true\n  if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n    // Perform the lookup of the ip address.\n    dns.lookup(host, (error, address) => {\n      // No ip found, return the error.\n      if (error) return callback(error);\n      // Perform a reverse ptr lookup on the ip address.\n      dns.resolvePtr(address, (err, results) => {\n        // This can error as ptr records may not exist for all ips. In this case\n        // fallback to a cname lookup as dns.lookup() does not return the\n        // cname.\n        if (err) {\n          return resolveCname(host, callback);\n        }\n        // If the ptr did not error but had no results, return the host.\n        callback(undefined, results.length > 0 ? results[0] : host);\n      });\n    });\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    resolveCname(host, callback);\n  }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nfunction resolveCname(host, callback) {\n  // Attempt to resolve the host name\n  dns.resolveCname(host, (err, r) => {\n    if (err) return callback(undefined, host);\n    // Get the first resolve host id\n    if (r.length > 0) {\n      return callback(undefined, r[0]);\n    }\n    callback(undefined, host);\n  });\n}\nexports.resolveCname = resolveCname;\n//# sourceMappingURL=gssapi.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}