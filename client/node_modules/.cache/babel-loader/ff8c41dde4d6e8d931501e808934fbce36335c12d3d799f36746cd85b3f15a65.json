{"ast":null,"code":"import { fromBase64 } from \"@aws-sdk/util-base64\";\nexport const streamCollector = stream => {\n  if (typeof Blob === \"function\" && stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n  return collectStream(stream);\n};\nasync function collectBlob(blob) {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\nasync function collectStream(stream) {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\nfunction readToBase64(blob) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = reader.result ?? \"\";\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    reader.readAsDataURL(blob);\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}