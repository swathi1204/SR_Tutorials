{"ast":null,"code":"import { AssumeRoleCommand, STSClient } from \"@aws-sdk/client-sts\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromTemporaryCredentials = options => {\n  let stsClient;\n  return async () => {\n    const params = {\n      ...options.params,\n      RoleSessionName: options.params.RoleSessionName ?? \"aws-sdk-js-\" + Date.now()\n    };\n    if (params?.SerialNumber) {\n      if (!options.mfaCodeProvider) {\n        throw new CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n      }\n      params.TokenCode = await options.mfaCodeProvider(params?.SerialNumber);\n    }\n    if (!stsClient) stsClient = new STSClient({\n      ...options.clientConfig,\n      credentials: options.masterCredentials\n    });\n    if (options.clientPlugins) {\n      for (const plugin of options.clientPlugins) {\n        stsClient.middlewareStack.use(plugin);\n      }\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}