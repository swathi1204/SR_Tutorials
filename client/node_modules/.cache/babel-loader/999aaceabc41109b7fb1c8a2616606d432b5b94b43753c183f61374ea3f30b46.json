{"ast":null,"code":"export const loggerMiddleware = () => (next, context) => async args => {\n  const response = await next(args);\n  const {\n    clientName,\n    commandName,\n    logger,\n    inputFilterSensitiveLog,\n    outputFilterSensitiveLog,\n    dynamoDbDocumentClientOptions = {}\n  } = context;\n  const {\n    overrideInputFilterSensitiveLog,\n    overrideOutputFilterSensitiveLog\n  } = dynamoDbDocumentClientOptions;\n  if (!logger) {\n    return response;\n  }\n  if (typeof logger.info === \"function\") {\n    const {\n      $metadata,\n      ...outputWithoutMetadata\n    } = response.output;\n    logger.info({\n      clientName,\n      commandName,\n      input: (overrideInputFilterSensitiveLog ?? inputFilterSensitiveLog)(args.input),\n      output: (overrideOutputFilterSensitiveLog ?? outputFilterSensitiveLog)(outputWithoutMetadata),\n      metadata: $metadata\n    });\n  }\n  return response;\n};\nexport const loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"initialize\",\n  override: true\n};\nexport const getLoggerPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}