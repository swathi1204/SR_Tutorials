{"ast":null,"code":"import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithSAMLCommand } from \"./commands/AssumeRoleWithSAMLCommand\";\nimport { AssumeRoleWithWebIdentityCommand } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nimport { DecodeAuthorizationMessageCommand } from \"./commands/DecodeAuthorizationMessageCommand\";\nimport { GetAccessKeyInfoCommand } from \"./commands/GetAccessKeyInfoCommand\";\nimport { GetCallerIdentityCommand } from \"./commands/GetCallerIdentityCommand\";\nimport { GetFederationTokenCommand } from \"./commands/GetFederationTokenCommand\";\nimport { GetSessionTokenCommand } from \"./commands/GetSessionTokenCommand\";\nimport { STSClient } from \"./STSClient\";\nexport class STS extends STSClient {\n  assumeRole(args, optionsOrCb, cb) {\n    const command = new AssumeRoleCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  assumeRoleWithSAML(args, optionsOrCb, cb) {\n    const command = new AssumeRoleWithSAMLCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  assumeRoleWithWebIdentity(args, optionsOrCb, cb) {\n    const command = new AssumeRoleWithWebIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  decodeAuthorizationMessage(args, optionsOrCb, cb) {\n    const command = new DecodeAuthorizationMessageCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  getAccessKeyInfo(args, optionsOrCb, cb) {\n    const command = new GetAccessKeyInfoCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  getCallerIdentity(args, optionsOrCb, cb) {\n    const command = new GetCallerIdentityCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  getFederationToken(args, optionsOrCb, cb) {\n    const command = new GetFederationTokenCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n  getSessionToken(args, optionsOrCb, cb) {\n    const command = new GetSessionTokenCommand(args);\n    if (typeof optionsOrCb === \"function\") {\n      this.send(command, optionsOrCb);\n    } else if (typeof cb === \"function\") {\n      if (typeof optionsOrCb !== \"object\") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);\n      this.send(command, optionsOrCb || {}, cb);\n    } else {\n      return this.send(command, optionsOrCb);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}