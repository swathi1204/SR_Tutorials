{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n  /**\n   * Create a new Admin instance\n   * @internal\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}