{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PromiseProvider = void 0;\nconst error_1 = require(\"./error\");\n/** @internal */\nconst kPromise = Symbol('promise');\nconst store = {\n  [kPromise]: null\n};\n/**\n * Global promise store allowing user-provided promises\n * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n * @public\n */\nclass PromiseProvider {\n  /**\n   * Validates the passed in promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static validate(lib) {\n    if (typeof lib !== 'function') throw new error_1.MongoInvalidArgumentError(`Promise must be a function, got ${lib}`);\n    return !!lib;\n  }\n  /**\n   * Sets the promise library\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static set(lib) {\n    // eslint-disable-next-line no-restricted-syntax\n    if (lib === null) {\n      // Check explicitly against null since `.set()` (no args) should fall through to validate\n      store[kPromise] = null;\n      return;\n    }\n    if (!PromiseProvider.validate(lib)) {\n      // validate\n      return;\n    }\n    store[kPromise] = lib;\n  }\n  /**\n   * Get the stored promise library, or resolves passed in\n   * @deprecated Setting a custom promise library is deprecated the next major version will use the global Promise constructor only.\n   */\n  static get() {\n    return store[kPromise];\n  }\n}\nexports.PromiseProvider = PromiseProvider;\n//# sourceMappingURL=promise_provider.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}