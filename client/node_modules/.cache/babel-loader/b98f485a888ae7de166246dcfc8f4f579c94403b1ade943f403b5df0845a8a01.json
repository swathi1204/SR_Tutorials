{"ast":null,"code":"import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = function () {\n  let conditions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let options = arguments.length > 1 ? arguments[1] : undefined;\n  const conditionsReferenceRecord = {};\n  for (const condition of conditions) {\n    const {\n      result,\n      toAssign\n    } = evaluateCondition(condition, {\n      ...options,\n      referenceRecord: {\n        ...options.referenceRecord,\n        ...conditionsReferenceRecord\n      }\n    });\n    if (!result) {\n      return {\n        result\n      };\n    }\n    if (toAssign) {\n      conditionsReferenceRecord[toAssign.name] = toAssign.value;\n      options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n    }\n  }\n  return {\n    result: true,\n    referenceRecord: conditionsReferenceRecord\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}