{"ast":null,"code":"import { HttpRequest } from \"@aws-sdk/protocol-http\";\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport const recursionDetectionMiddleware = options => next => async args => {\n  const {\n    request\n  } = args;\n  if (!HttpRequest.isInstance(request) || options.runtime !== \"node\" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n    return next(args);\n  }\n  const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n  const traceId = process.env[ENV_TRACE_ID];\n  const nonEmptyString = str => typeof str === \"string\" && str.length > 0;\n  if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n    request.headers[TRACE_ID_HEADER_NAME] = traceId;\n  }\n  return next({\n    ...args,\n    request\n  });\n};\nexport const addRecursionDetectionMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"RECURSION_DETECTION\"],\n  name: \"recursionDetectionMiddleware\",\n  override: true,\n  priority: \"low\"\n};\nexport const getRecursionDetectionPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}