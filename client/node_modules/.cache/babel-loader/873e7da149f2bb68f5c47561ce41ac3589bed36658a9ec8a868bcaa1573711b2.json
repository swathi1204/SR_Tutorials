{"ast":null,"code":"import { debugId, toDebugString } from \"./debug\";\nimport { EndpointError } from \"./types\";\nimport { evaluateRules } from \"./utils\";\nexport const resolveEndpoint = (ruleSetObject, options) => {\n  const {\n    endpointParams,\n    logger\n  } = options;\n  const {\n    parameters,\n    rules\n  } = ruleSetObject;\n  options.logger?.debug?.(debugId, `Initial EndpointParams: ${toDebugString(endpointParams)}`);\n  const paramsWithDefault = Object.entries(parameters).filter(_ref => {\n    let [, v] = _ref;\n    return v.default != null;\n  }).map(_ref2 => {\n    let [k, v] = _ref2;\n    return [k, v.default];\n  });\n  if (paramsWithDefault.length > 0) {\n    for (const [paramKey, paramDefaultValue] of paramsWithDefault) {\n      endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n    }\n  }\n  const requiredParams = Object.entries(parameters).filter(_ref3 => {\n    let [, v] = _ref3;\n    return v.required;\n  }).map(_ref4 => {\n    let [k] = _ref4;\n    return k;\n  });\n  for (const requiredParam of requiredParams) {\n    if (endpointParams[requiredParam] == null) {\n      throw new EndpointError(`Missing required parameter: '${requiredParam}'`);\n    }\n  }\n  const endpoint = evaluateRules(rules, {\n    endpointParams,\n    logger,\n    referenceRecord: {}\n  });\n  if (options.endpointParams?.Endpoint) {\n    try {\n      const givenEndpoint = new URL(options.endpointParams.Endpoint);\n      const {\n        protocol,\n        port\n      } = givenEndpoint;\n      endpoint.url.protocol = protocol;\n      endpoint.url.port = port;\n    } catch (e) {}\n  }\n  options.logger?.debug?.(debugId, `Resolved endpoint: ${toDebugString(endpoint)}`);\n  return endpoint;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}