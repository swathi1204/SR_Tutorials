{"ast":null,"code":"import { debugId, toDebugString } from \"../debug\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { getEndpointHeaders } from \"./getEndpointHeaders\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nimport { getEndpointUrl } from \"./getEndpointUrl\";\nexport const evaluateEndpointRule = (endpointRule, options) => {\n  const {\n    conditions,\n    endpoint\n  } = endpointRule;\n  const {\n    result,\n    referenceRecord\n  } = evaluateConditions(conditions, options);\n  if (!result) {\n    return;\n  }\n  const endpointRuleOptions = {\n    ...options,\n    referenceRecord: {\n      ...options.referenceRecord,\n      ...referenceRecord\n    }\n  };\n  const {\n    url,\n    properties,\n    headers\n  } = endpoint;\n  options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);\n  return {\n    ...(headers != undefined && {\n      headers: getEndpointHeaders(headers, endpointRuleOptions)\n    }),\n    ...(properties != undefined && {\n      properties: getEndpointProperties(properties, endpointRuleOptions)\n    }),\n    url: getEndpointUrl(url, endpointRuleOptions)\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}