{"ast":null,"code":"import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, _ref) => {\n  let {\n    useFipsEndpoint = false,\n    useDualstackEndpoint = false,\n    signingService,\n    regionHash,\n    partitionHash\n  } = _ref;\n  const partition = getResolvedPartition(region, {\n    partitionHash\n  });\n  const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n  const hostnameOptions = {\n    useFipsEndpoint,\n    useDualstackEndpoint\n  };\n  const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n  const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n  const hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname,\n    partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(`Endpoint resolution failed for: ${{\n      resolvedRegion,\n      useFipsEndpoint,\n      useDualstackEndpoint\n    }}`);\n  }\n  const signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: regionHash[resolvedRegion]?.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint\n  });\n  return {\n    partition,\n    signingService,\n    hostname,\n    ...(signingRegion && {\n      signingRegion\n    }),\n    ...(regionHash[resolvedRegion]?.signingService && {\n      signingService: regionHash[resolvedRegion].signingService\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}