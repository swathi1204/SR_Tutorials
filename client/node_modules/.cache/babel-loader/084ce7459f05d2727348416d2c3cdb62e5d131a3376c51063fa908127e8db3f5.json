{"ast":null,"code":"export function map(arg0, arg1, arg2) {\n  let target;\n  let filter;\n  let instructions;\n  if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n    target = {};\n    instructions = arg0;\n  } else {\n    target = arg0;\n    if (typeof arg1 === \"function\") {\n      filter = arg1;\n      instructions = arg2;\n      return mapWithFilter(target, filter, instructions);\n    } else {\n      instructions = arg1;\n    }\n  }\n  for (const key of Object.keys(instructions)) {\n    if (!Array.isArray(instructions[key])) {\n      target[key] = instructions[key];\n      continue;\n    }\n    let [filter, value] = instructions[key];\n    if (typeof value === \"function\") {\n      let _value;\n      const defaultFilterPassed = filter === undefined && (_value = value()) != null;\n      const customFilterPassed = typeof filter === \"function\" && !!filter(void 0) || typeof filter !== \"function\" && !!filter;\n      if (defaultFilterPassed) {\n        target[key] = _value;\n      } else if (customFilterPassed) {\n        target[key] = value();\n      }\n    } else {\n      const defaultFilterPassed = filter === undefined && value != null;\n      const customFilterPassed = typeof filter === \"function\" && !!filter(value) || typeof filter !== \"function\" && !!filter;\n      if (defaultFilterPassed || customFilterPassed) {\n        target[key] = value;\n      }\n    }\n  }\n  return target;\n}\nexport const convertMap = target => {\n  const output = {};\n  for (const [k, v] of Object.entries(target || {})) {\n    output[k] = [, v];\n  }\n  return output;\n};\nconst mapWithFilter = (target, filter, instructions) => {\n  return map(target, Object.entries(instructions).reduce((_instructions, _ref) => {\n    let [key, value] = _ref;\n    if (Array.isArray(value)) {\n      _instructions[key] = value;\n    } else {\n      if (typeof value === \"function\") {\n        _instructions[key] = [filter, value()];\n      } else {\n        _instructions[key] = [filter, value];\n      }\n    }\n    return _instructions;\n  }, {}));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}