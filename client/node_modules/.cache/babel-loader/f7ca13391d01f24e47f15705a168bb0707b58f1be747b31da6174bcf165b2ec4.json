{"ast":null,"code":"import { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n  return input;\n}\nexport const hostHeaderMiddleware = options => next => async args => {\n  if (!HttpRequest.isInstance(args.request)) return next(args);\n  const {\n    request\n  } = args;\n  const {\n    handlerProtocol = \"\"\n  } = options.requestHandler.metadata || {};\n  if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n    delete request.headers[\"host\"];\n    request.headers[\":authority\"] = \"\";\n  } else if (!request.headers[\"host\"]) {\n    request.headers[\"host\"] = request.hostname;\n  }\n  return next(args);\n};\nexport const hostHeaderMiddlewareOptions = {\n  name: \"hostHeaderMiddleware\",\n  step: \"build\",\n  priority: \"low\",\n  tags: [\"HOST\"],\n  override: true\n};\nexport const getHostHeaderPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}